package com.company.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Controller     // 객체 생성
@RequestMapping("/sample/*")
public class SampleController {
	
	// ModelAndView <- 옛날 리턴 타입 중 하나
	
	@RequestMapping("/basic")
	public void basic() {
		log.info("/basic 요청..........");
		// view 리졸버  /sample/basic 그대로 전달(void일 경우)     
		// void 타입일 경우 /WEB-INF/views/sample/basic.jsp
	}
	
//		// 기본 GET / POST 둘 다 응답
//	@RequestMapping("/login")
//	public String login() {
//		log.info("/basic 요청.........");
//		return "login";    
//  //String 타입일 경우 login만을 가지고 servlet view resolver로 간다. -> 앞뒤로 /WEB-INF/views 와 .jsp를 붙인다.
//	}
	
	// GET 방식 응답
	@RequestMapping(value="/login", method=RequestMethod.GET)
	public String login() {
		log.info("/basic 요청.........");
		return "login";    
	}
		
	// POST 방식 응답
	@RequestMapping(value="/login", method=RequestMethod.POST)
	public String loginPost() {
		log.info("/login Post 요청");
		return "/sample/basic";
	}
	
	@RequestMapping(value="/info", method=RequestMethod.GET)
	public void method1() {
		log.info("/sample/info 요청...");
		// 뷰 리졸버 : void인 경우 현재의 주소 /sample/info 그대로가 넘어간다
	} 
	
	@RequestMapping(value="/admin", method=RequestMethod.GET)
	public String method2() {
		log.info("/sample/admin 요청....");
		return "/sample/admin";
		// 뷰리졸버 : /sample/admin
	}
}









